<?php
namespace Will\Bundle\SfGoogleApiBundle\Security\Authorization;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\Security\Http\Authorization\AccessDeniedHandlerInterface;
use Will\Bundle\SfGoogleApiBundle\GoogleClient;
class AccessDeniedHandler implements AccessDeniedHandlerInterface
{
    private $client;
    public function __construct(GoogleClient $client)
    {
        $this->client = $client;
    }
    /**
     * {@inheritDoc}
     */
    public function handle(Request $request, AccessDeniedException $accessDeniedException)
    {
        return new RedirectResponse($this->client->generateAuthUrl());
    }
    public function onKernelException(GetResponseForExceptionEvent $event)
    {
        if ($event->getException() instanceof \Google_Auth_Exception ||
            $event->getException() instanceof \Google_Service_Exception
        ) {
            $event->setResponse(
                new RedirectResponse($this->client->generateAuthUrl())
            );
        }
    }
}
Authenticator.php
<?php
namespace Will\Bundle\SfGoogleApiBundle\Security\Authentication;
use Symfony\Component\Security\Http\Authentication\SimplePreAuthenticatorInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authentication\Token\PreAuthenticatedToken;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Http\Authentication\AuthenticationFailureHandlerInterface;
use Symfony\Component\HttpFoundation\Response;
class Authenticator implements SimplePreAuthenticatorInterface, AuthenticationFailureHandlerInterface
{
    /**
     * {@inheritDoc}
     */
    public function createToken(Request $request, $providerKey)
    {
        return new PreAuthenticatedToken(
            'anon.',
            null,
            $providerKey
        );
    }
    /**
     * {@inheritDoc}
     */
    public function authenticateToken(TokenInterface $token, UserProviderInterface $userProvider, $providerKey)
    {
        return new PreAuthenticatedToken(
            'anon.',
            null,
            $providerKey,
            []
        );
    }
    /**
     * {@inheritDoc}
     */
    public function supportsToken(TokenInterface $token, $providerKey)
    {
        return $token instanceof PreAuthenticatedToken && $token->getProviderKey() === $providerKey;
    }
    /**
     * {@inheritDoc}
     */
    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
    {
        return new Response("Authentication Failed.", 403);
    }
}
security.yml
security:
    providers:
        in_memory:
            memory: ~

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        default:
            pattern:  ^/
            simple_preauth:
                authenticator: will_sf_google_api.authenticator
            access_denied_handler: will_sf_google_api.access_denied.handler

    access_control:
        - { path: ^/oauth/callback$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: ROLE_HAS_TOKEN }
